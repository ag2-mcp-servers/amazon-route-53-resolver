# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:27:31+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(min_length=12, max_length=32)]):
    root: constr(min_length=12, max_length=32)


class Action(Enum):
    ALLOW = 'ALLOW'
    BLOCK = 'BLOCK'
    ALERT = 'ALERT'


class Arn(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class AutodefinedReverseFlag(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'
    USE_LOCAL_RESOURCE_SETTING = 'USE_LOCAL_RESOURCE_SETTING'


class BlockOverrideDnsType(Enum):
    CNAME = 'CNAME'


class BlockOverrideDomain(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class BlockOverrideTtl(RootModel[conint(ge=0, le=604800)]):
    root: conint(ge=0, le=604800)


class BlockResponse(Enum):
    NODATA = 'NODATA'
    NXDOMAIN = 'NXDOMAIN'
    OVERRIDE = 'OVERRIDE'


class Boolean(RootModel[bool]):
    root: bool


class ConflictException(RootModel[Any]):
    root: Any


class Count(RootModel[int]):
    root: int


class CreatorRequestId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DestinationArn(RootModel[constr(min_length=1, max_length=600)]):
    root: constr(min_length=1, max_length=600)


class DomainListFileUrl(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class DomainName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class FilterName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class FilterValue(RootModel[constr(min_length=1, max_length=600)]):
    root: constr(min_length=1, max_length=600)


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class FirewallDomainImportOperation(Enum):
    REPLACE = 'REPLACE'


class FirewallDomainListStatus(Enum):
    COMPLETE = 'COMPLETE'
    COMPLETE_IMPORT_FAILED = 'COMPLETE_IMPORT_FAILED'
    IMPORTING = 'IMPORTING'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class FirewallDomainName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class FirewallDomainUpdateOperation(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'
    REPLACE = 'REPLACE'


class FirewallDomains(RootModel[List[FirewallDomainName]]):
    root: List[FirewallDomainName]


class FirewallFailOpenStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    USE_LOCAL_RESOURCE_SETTING = 'USE_LOCAL_RESOURCE_SETTING'


class FirewallRuleGroupAssociationStatus(Enum):
    COMPLETE = 'COMPLETE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class FirewallRuleGroupPolicy(RootModel[constr(max_length=30000)]):
    root: constr(max_length=30000)


class FirewallRuleGroupStatus(Enum):
    COMPLETE = 'COMPLETE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class GetFirewallRuleGroupPolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')


class GetFirewallRuleGroupPolicyResponse(BaseModel):
    FirewallRuleGroupPolicy_1: Optional[FirewallRuleGroupPolicy] = Field(
        None, alias='FirewallRuleGroupPolicy'
    )


class GetResolverQueryLogConfigPolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')


class GetResolverRulePolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')


class InternalServiceErrorException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidPolicyDocument(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidTagException(RootModel[Any]):
    root: Any


class Ip(RootModel[constr(min_length=7, max_length=36)]):
    root: constr(min_length=7, max_length=36)


class IpAddressCount(RootModel[int]):
    root: int


class IpAddressStatus(Enum):
    CREATING = 'CREATING'
    FAILED_CREATION = 'FAILED_CREATION'
    ATTACHING = 'ATTACHING'
    ATTACHED = 'ATTACHED'
    REMAP_DETACHING = 'REMAP_DETACHING'
    REMAP_ATTACHING = 'REMAP_ATTACHING'
    DETACHING = 'DETACHING'
    FAILED_RESOURCE_GONE = 'FAILED_RESOURCE_GONE'
    DELETING = 'DELETING'
    DELETE_FAILED_FAS_EXPIRED = 'DELETE_FAILED_FAS_EXPIRED'
    UPDATING = 'UPDATING'


class Ipv6(RootModel[constr(min_length=7, max_length=39)]):
    root: constr(min_length=7, max_length=39)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListDomainMaxResults(RootModel[conint(ge=1, le=5000)]):
    root: conint(ge=1, le=5000)


class ListFirewallConfigsMaxResult(RootModel[conint(ge=5, le=10)]):
    root: conint(ge=5, le=10)


class ListResolverConfigsMaxResult(RootModel[conint(ge=5, le=100)]):
    root: conint(ge=5, le=100)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MutationProtectionStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Name(
    RootModel[constr(pattern=r'(?!^[0-9]+$)([a-zA-Z0-9\-_\' \']+)', max_length=64)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'(?!^[0-9]+$)([a-zA-Z0-9\-_\' \']+)', max_length=64)


class NextToken(RootModel[str]):
    root: str


class Port(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class Priority(RootModel[int]):
    root: int


class PutFirewallRuleGroupPolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    FirewallRuleGroupPolicy_1: FirewallRuleGroupPolicy = Field(
        ..., alias='FirewallRuleGroupPolicy'
    )


class PutFirewallRuleGroupPolicyResponse(BaseModel):
    ReturnValue: Optional[Boolean] = None


class PutResolverQueryLogConfigPolicyResponse(BaseModel):
    ReturnValue: Optional[Boolean] = None


class PutResolverRulePolicyResponse(BaseModel):
    ReturnValue: Optional[Boolean] = None


class ResolverAutodefinedReverseStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'
    UPDATING_TO_USE_LOCAL_RESOURCE_SETTING = 'UPDATING_TO_USE_LOCAL_RESOURCE_SETTING'
    USE_LOCAL_RESOURCE_SETTING = 'USE_LOCAL_RESOURCE_SETTING'


class ResolverDNSSECValidationStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'
    UPDATING_TO_USE_LOCAL_RESOURCE_SETTING = 'UPDATING_TO_USE_LOCAL_RESOURCE_SETTING'
    USE_LOCAL_RESOURCE_SETTING = 'USE_LOCAL_RESOURCE_SETTING'


class ResolverEndpointDirection(Enum):
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'


class ResolverEndpointStatus(Enum):
    CREATING = 'CREATING'
    OPERATIONAL = 'OPERATIONAL'
    UPDATING = 'UPDATING'
    AUTO_RECOVERING = 'AUTO_RECOVERING'
    ACTION_NEEDED = 'ACTION_NEEDED'
    DELETING = 'DELETING'


class ResolverEndpointType(Enum):
    IPV6 = 'IPV6'
    IPV4 = 'IPV4'
    DUALSTACK = 'DUALSTACK'


class ResolverQueryLogConfigAssociationError(Enum):
    NONE = 'NONE'
    DESTINATION_NOT_FOUND = 'DESTINATION_NOT_FOUND'
    ACCESS_DENIED = 'ACCESS_DENIED'
    INTERNAL_SERVICE_ERROR = 'INTERNAL_SERVICE_ERROR'


class ResolverQueryLogConfigAssociationErrorMessage(RootModel[str]):
    root: str


class ResolverQueryLogConfigAssociationStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    ACTION_NEEDED = 'ACTION_NEEDED'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class ResolverQueryLogConfigName(
    RootModel[
        constr(
            pattern=r'(?!^[0-9]+$)([a-zA-Z0-9\-_\' \']+)', min_length=1, max_length=64
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(?!^[0-9]+$)([a-zA-Z0-9\-_\' \']+)', min_length=1, max_length=64
    )


class ResolverQueryLogConfigPolicy(RootModel[constr(max_length=30000)]):
    root: constr(max_length=30000)


class ResolverQueryLogConfigStatus(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class ResolverRuleAssociationStatus(Enum):
    CREATING = 'CREATING'
    COMPLETE = 'COMPLETE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    OVERRIDDEN = 'OVERRIDDEN'


class ResolverRulePolicy(RootModel[constr(max_length=30000)]):
    root: constr(max_length=30000)


class ResolverRuleStatus(Enum):
    COMPLETE = 'COMPLETE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    FAILED = 'FAILED'


class ResourceExistsException(RootModel[Any]):
    root: Any


class ResourceId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceUnavailableException(RootModel[Any]):
    root: Any


class Rfc3339TimeString(RootModel[constr(min_length=20, max_length=40)]):
    root: constr(min_length=20, max_length=40)


class RuleTypeOption(Enum):
    FORWARD = 'FORWARD'
    SYSTEM = 'SYSTEM'
    RECURSIVE = 'RECURSIVE'


class SecurityGroupIds(RootModel[List[ResourceId]]):
    root: List[ResourceId]


class ServicePrinciple(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ShareStatus(Enum):
    NOT_SHARED = 'NOT_SHARED'
    SHARED_WITH_ME = 'SHARED_WITH_ME'
    SHARED_BY_ME = 'SHARED_BY_ME'


class SortByKey(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class StatusMessage(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class SubnetId(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetAddress(BaseModel):
    Ip_1: Optional[Ip] = Field(None, alias='Ip')
    Ipv6_1: Optional[Ipv6] = Field(None, alias='Ipv6')
    Port_1: Optional[Port] = Field(None, alias='Port')


class TargetList(RootModel[List[TargetAddress]]):
    root: List[TargetAddress] = Field(..., min_length=1)


class ThrottlingException(RootModel[Any]):
    root: Any


class UnknownResourceException(RootModel[Any]):
    root: Any


class Unsigned(RootModel[int]):
    root: int


class UntagResourceRequest(BaseModel):
    ResourceArn: Arn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateFirewallConfigRequest(BaseModel):
    FirewallFailOpen: FirewallFailOpenStatus
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class UpdateFirewallDomainsRequest(BaseModel):
    Domains: FirewallDomains
    FirewallDomainListId: ResourceId
    Operation: FirewallDomainUpdateOperation


class UpdateFirewallDomainsResponse(BaseModel):
    Id: Optional[ResourceId] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Status: Optional[FirewallDomainListStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class UpdateFirewallRuleGroupAssociationRequest(BaseModel):
    FirewallRuleGroupAssociationId: ResourceId
    MutationProtection: Optional[MutationProtectionStatus] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')


class UpdateFirewallRuleRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    BlockOverrideDnsType_1: Optional[BlockOverrideDnsType] = Field(
        None, alias='BlockOverrideDnsType'
    )
    BlockOverrideDomain_1: Optional[BlockOverrideDomain] = Field(
        None, alias='BlockOverrideDomain'
    )
    BlockOverrideTtl_1: Optional[BlockOverrideTtl] = Field(
        None, alias='BlockOverrideTtl'
    )
    BlockResponse_1: Optional[BlockResponse] = Field(None, alias='BlockResponse')
    FirewallDomainListId: ResourceId
    FirewallRuleGroupId: ResourceId
    Name_1: Optional[Name] = Field(None, alias='Name')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')


class UpdateIpAddress(BaseModel):
    IpId: ResourceId
    Ipv6_1: Ipv6 = Field(..., alias='Ipv6')


class UpdateIpAddresses(RootModel[List[UpdateIpAddress]]):
    root: List[UpdateIpAddress] = Field(..., max_length=50, min_length=0)


class UpdateResolverConfigRequest(BaseModel):
    AutodefinedReverseFlag_1: AutodefinedReverseFlag = Field(
        ..., alias='AutodefinedReverseFlag'
    )
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class UpdateResolverEndpointRequest(BaseModel):
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverEndpointId: ResourceId
    ResolverEndpointType_1: Optional[ResolverEndpointType] = Field(
        None, alias='ResolverEndpointType'
    )
    UpdateIpAddresses_1: Optional[UpdateIpAddresses] = Field(
        None, alias='UpdateIpAddresses'
    )


class Validation(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'
    USE_LOCAL_RESOURCE_SETTING = 'USE_LOCAL_RESOURCE_SETTING'


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    Route53Resolver_AssociateFirewallRuleGroup = (
        'Route53Resolver.AssociateFirewallRuleGroup'
    )


class XAmzTarget1(Enum):
    Route53Resolver_AssociateResolverEndpointIpAddress = (
        'Route53Resolver.AssociateResolverEndpointIpAddress'
    )


class XAmzTarget2(Enum):
    Route53Resolver_AssociateResolverQueryLogConfig = (
        'Route53Resolver.AssociateResolverQueryLogConfig'
    )


class XAmzTarget3(Enum):
    Route53Resolver_AssociateResolverRule = 'Route53Resolver.AssociateResolverRule'


class XAmzTarget4(Enum):
    Route53Resolver_CreateFirewallDomainList = (
        'Route53Resolver.CreateFirewallDomainList'
    )


class XAmzTarget5(Enum):
    Route53Resolver_CreateFirewallRule = 'Route53Resolver.CreateFirewallRule'


class XAmzTarget6(Enum):
    Route53Resolver_CreateFirewallRuleGroup = 'Route53Resolver.CreateFirewallRuleGroup'


class XAmzTarget7(Enum):
    Route53Resolver_CreateResolverEndpoint = 'Route53Resolver.CreateResolverEndpoint'


class XAmzTarget8(Enum):
    Route53Resolver_CreateResolverQueryLogConfig = (
        'Route53Resolver.CreateResolverQueryLogConfig'
    )


class XAmzTarget9(Enum):
    Route53Resolver_CreateResolverRule = 'Route53Resolver.CreateResolverRule'


class XAmzTarget10(Enum):
    Route53Resolver_DeleteFirewallDomainList = (
        'Route53Resolver.DeleteFirewallDomainList'
    )


class XAmzTarget11(Enum):
    Route53Resolver_DeleteFirewallRule = 'Route53Resolver.DeleteFirewallRule'


class XAmzTarget12(Enum):
    Route53Resolver_DeleteFirewallRuleGroup = 'Route53Resolver.DeleteFirewallRuleGroup'


class XAmzTarget13(Enum):
    Route53Resolver_DeleteResolverEndpoint = 'Route53Resolver.DeleteResolverEndpoint'


class XAmzTarget14(Enum):
    Route53Resolver_DeleteResolverQueryLogConfig = (
        'Route53Resolver.DeleteResolverQueryLogConfig'
    )


class XAmzTarget15(Enum):
    Route53Resolver_DeleteResolverRule = 'Route53Resolver.DeleteResolverRule'


class XAmzTarget16(Enum):
    Route53Resolver_DisassociateFirewallRuleGroup = (
        'Route53Resolver.DisassociateFirewallRuleGroup'
    )


class XAmzTarget17(Enum):
    Route53Resolver_DisassociateResolverEndpointIpAddress = (
        'Route53Resolver.DisassociateResolverEndpointIpAddress'
    )


class XAmzTarget18(Enum):
    Route53Resolver_DisassociateResolverQueryLogConfig = (
        'Route53Resolver.DisassociateResolverQueryLogConfig'
    )


class XAmzTarget19(Enum):
    Route53Resolver_DisassociateResolverRule = (
        'Route53Resolver.DisassociateResolverRule'
    )


class XAmzTarget20(Enum):
    Route53Resolver_GetFirewallConfig = 'Route53Resolver.GetFirewallConfig'


class XAmzTarget21(Enum):
    Route53Resolver_GetFirewallDomainList = 'Route53Resolver.GetFirewallDomainList'


class XAmzTarget22(Enum):
    Route53Resolver_GetFirewallRuleGroup = 'Route53Resolver.GetFirewallRuleGroup'


class XAmzTarget23(Enum):
    Route53Resolver_GetFirewallRuleGroupAssociation = (
        'Route53Resolver.GetFirewallRuleGroupAssociation'
    )


class XAmzTarget24(Enum):
    Route53Resolver_GetFirewallRuleGroupPolicy = (
        'Route53Resolver.GetFirewallRuleGroupPolicy'
    )


class XAmzTarget25(Enum):
    Route53Resolver_GetResolverConfig = 'Route53Resolver.GetResolverConfig'


class XAmzTarget26(Enum):
    Route53Resolver_GetResolverDnssecConfig = 'Route53Resolver.GetResolverDnssecConfig'


class XAmzTarget27(Enum):
    Route53Resolver_GetResolverEndpoint = 'Route53Resolver.GetResolverEndpoint'


class XAmzTarget28(Enum):
    Route53Resolver_GetResolverQueryLogConfig = (
        'Route53Resolver.GetResolverQueryLogConfig'
    )


class XAmzTarget29(Enum):
    Route53Resolver_GetResolverQueryLogConfigAssociation = (
        'Route53Resolver.GetResolverQueryLogConfigAssociation'
    )


class XAmzTarget30(Enum):
    Route53Resolver_GetResolverQueryLogConfigPolicy = (
        'Route53Resolver.GetResolverQueryLogConfigPolicy'
    )


class XAmzTarget31(Enum):
    Route53Resolver_GetResolverRule = 'Route53Resolver.GetResolverRule'


class XAmzTarget32(Enum):
    Route53Resolver_GetResolverRuleAssociation = (
        'Route53Resolver.GetResolverRuleAssociation'
    )


class XAmzTarget33(Enum):
    Route53Resolver_GetResolverRulePolicy = 'Route53Resolver.GetResolverRulePolicy'


class XAmzTarget34(Enum):
    Route53Resolver_ImportFirewallDomains = 'Route53Resolver.ImportFirewallDomains'


class XAmzTarget35(Enum):
    Route53Resolver_ListFirewallConfigs = 'Route53Resolver.ListFirewallConfigs'


class XAmzTarget36(Enum):
    Route53Resolver_ListFirewallDomainLists = 'Route53Resolver.ListFirewallDomainLists'


class XAmzTarget37(Enum):
    Route53Resolver_ListFirewallDomains = 'Route53Resolver.ListFirewallDomains'


class XAmzTarget38(Enum):
    Route53Resolver_ListFirewallRuleGroupAssociations = (
        'Route53Resolver.ListFirewallRuleGroupAssociations'
    )


class XAmzTarget39(Enum):
    Route53Resolver_ListFirewallRuleGroups = 'Route53Resolver.ListFirewallRuleGroups'


class XAmzTarget40(Enum):
    Route53Resolver_ListFirewallRules = 'Route53Resolver.ListFirewallRules'


class XAmzTarget41(Enum):
    Route53Resolver_ListResolverConfigs = 'Route53Resolver.ListResolverConfigs'


class XAmzTarget42(Enum):
    Route53Resolver_ListResolverDnssecConfigs = (
        'Route53Resolver.ListResolverDnssecConfigs'
    )


class XAmzTarget43(Enum):
    Route53Resolver_ListResolverEndpointIpAddresses = (
        'Route53Resolver.ListResolverEndpointIpAddresses'
    )


class XAmzTarget44(Enum):
    Route53Resolver_ListResolverEndpoints = 'Route53Resolver.ListResolverEndpoints'


class XAmzTarget45(Enum):
    Route53Resolver_ListResolverQueryLogConfigAssociations = (
        'Route53Resolver.ListResolverQueryLogConfigAssociations'
    )


class XAmzTarget46(Enum):
    Route53Resolver_ListResolverQueryLogConfigs = (
        'Route53Resolver.ListResolverQueryLogConfigs'
    )


class XAmzTarget47(Enum):
    Route53Resolver_ListResolverRuleAssociations = (
        'Route53Resolver.ListResolverRuleAssociations'
    )


class XAmzTarget48(Enum):
    Route53Resolver_ListResolverRules = 'Route53Resolver.ListResolverRules'


class XAmzTarget49(Enum):
    Route53Resolver_ListTagsForResource = 'Route53Resolver.ListTagsForResource'


class XAmzTarget50(Enum):
    Route53Resolver_PutFirewallRuleGroupPolicy = (
        'Route53Resolver.PutFirewallRuleGroupPolicy'
    )


class XAmzTarget51(Enum):
    Route53Resolver_PutResolverQueryLogConfigPolicy = (
        'Route53Resolver.PutResolverQueryLogConfigPolicy'
    )


class XAmzTarget52(Enum):
    Route53Resolver_PutResolverRulePolicy = 'Route53Resolver.PutResolverRulePolicy'


class XAmzTarget53(Enum):
    Route53Resolver_TagResource = 'Route53Resolver.TagResource'


class XAmzTarget54(Enum):
    Route53Resolver_UntagResource = 'Route53Resolver.UntagResource'


class XAmzTarget55(Enum):
    Route53Resolver_UpdateFirewallConfig = 'Route53Resolver.UpdateFirewallConfig'


class XAmzTarget56(Enum):
    Route53Resolver_UpdateFirewallDomains = 'Route53Resolver.UpdateFirewallDomains'


class XAmzTarget57(Enum):
    Route53Resolver_UpdateFirewallRule = 'Route53Resolver.UpdateFirewallRule'


class XAmzTarget58(Enum):
    Route53Resolver_UpdateFirewallRuleGroupAssociation = (
        'Route53Resolver.UpdateFirewallRuleGroupAssociation'
    )


class XAmzTarget59(Enum):
    Route53Resolver_UpdateResolverConfig = 'Route53Resolver.UpdateResolverConfig'


class XAmzTarget60(Enum):
    Route53Resolver_UpdateResolverDnssecConfig = (
        'Route53Resolver.UpdateResolverDnssecConfig'
    )


class XAmzTarget61(Enum):
    Route53Resolver_UpdateResolverEndpoint = 'Route53Resolver.UpdateResolverEndpoint'


class XAmzTarget62(Enum):
    Route53Resolver_UpdateResolverRule = 'Route53Resolver.UpdateResolverRule'


class AssociateResolverQueryLogConfigRequest(BaseModel):
    ResolverQueryLogConfigId: ResourceId
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class AssociateResolverRuleRequest(BaseModel):
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverRuleId: ResourceId
    VPCId: ResourceId


class CreateFirewallRuleRequest(BaseModel):
    Action_1: Action = Field(..., alias='Action')
    BlockOverrideDnsType_1: Optional[BlockOverrideDnsType] = Field(
        None, alias='BlockOverrideDnsType'
    )
    BlockOverrideDomain_1: Optional[BlockOverrideDomain] = Field(
        None, alias='BlockOverrideDomain'
    )
    BlockOverrideTtl_1: Optional[BlockOverrideTtl] = Field(
        None, alias='BlockOverrideTtl'
    )
    BlockResponse_1: Optional[BlockResponse] = Field(None, alias='BlockResponse')
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    FirewallDomainListId: ResourceId
    FirewallRuleGroupId: ResourceId
    Name_1: Name = Field(..., alias='Name')
    Priority_1: Priority = Field(..., alias='Priority')


class DeleteFirewallDomainListRequest(BaseModel):
    FirewallDomainListId: ResourceId


class DeleteFirewallRuleGroupRequest(BaseModel):
    FirewallRuleGroupId: ResourceId


class DeleteFirewallRuleRequest(BaseModel):
    FirewallDomainListId: ResourceId
    FirewallRuleGroupId: ResourceId


class DeleteResolverEndpointRequest(BaseModel):
    ResolverEndpointId: ResourceId


class DeleteResolverQueryLogConfigRequest(BaseModel):
    ResolverQueryLogConfigId: ResourceId


class DeleteResolverRuleRequest(BaseModel):
    ResolverRuleId: ResourceId


class DisassociateFirewallRuleGroupRequest(BaseModel):
    FirewallRuleGroupAssociationId: ResourceId


class DisassociateResolverQueryLogConfigRequest(BaseModel):
    ResolverQueryLogConfigId: ResourceId
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class DisassociateResolverRuleRequest(BaseModel):
    ResolverRuleId: ResourceId
    VPCId: ResourceId


class Filter(BaseModel):
    Name: Optional[FilterName] = None
    Values: Optional[FilterValues] = None


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class FirewallConfig(BaseModel):
    FirewallFailOpen: Optional[FirewallFailOpenStatus] = None
    Id: Optional[ResourceId] = None
    OwnerId: Optional[AccountId] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')


class FirewallConfigList(RootModel[List[FirewallConfig]]):
    root: List[FirewallConfig]


class FirewallDomainList(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    DomainCount: Optional[Unsigned] = None
    Id: Optional[ResourceId] = None
    ManagedOwnerName: Optional[ServicePrinciple] = None
    ModificationTime: Optional[Rfc3339TimeString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Status: Optional[FirewallDomainListStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class FirewallDomainListMetadata(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    Id: Optional[ResourceId] = None
    ManagedOwnerName: Optional[ServicePrinciple] = None
    Name_1: Optional[Name] = Field(None, alias='Name')


class FirewallDomainListMetadataList(RootModel[List[FirewallDomainListMetadata]]):
    root: List[FirewallDomainListMetadata]


class FirewallRule(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    BlockOverrideDnsType_1: Optional[BlockOverrideDnsType] = Field(
        None, alias='BlockOverrideDnsType'
    )
    BlockOverrideDomain_1: Optional[BlockOverrideDomain] = Field(
        None, alias='BlockOverrideDomain'
    )
    BlockOverrideTtl: Optional[Unsigned] = None
    BlockResponse_1: Optional[BlockResponse] = Field(None, alias='BlockResponse')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    FirewallDomainListId: Optional[ResourceId] = None
    FirewallRuleGroupId: Optional[ResourceId] = None
    ModificationTime: Optional[Rfc3339TimeString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')


class FirewallRuleGroup(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    Id: Optional[ResourceId] = None
    ModificationTime: Optional[Rfc3339TimeString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    OwnerId: Optional[AccountId] = None
    RuleCount: Optional[Unsigned] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')
    Status: Optional[FirewallRuleGroupStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class FirewallRuleGroupAssociation(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    FirewallRuleGroupId: Optional[ResourceId] = None
    Id: Optional[ResourceId] = None
    ManagedOwnerName: Optional[ServicePrinciple] = None
    ModificationTime: Optional[Rfc3339TimeString] = None
    MutationProtection: Optional[MutationProtectionStatus] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')
    Status: Optional[FirewallRuleGroupAssociationStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VpcId: Optional[ResourceId] = None


class FirewallRuleGroupAssociations(RootModel[List[FirewallRuleGroupAssociation]]):
    root: List[FirewallRuleGroupAssociation]


class FirewallRuleGroupMetadata(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    Id: Optional[ResourceId] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    OwnerId: Optional[AccountId] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')


class FirewallRuleGroupMetadataList(RootModel[List[FirewallRuleGroupMetadata]]):
    root: List[FirewallRuleGroupMetadata]


class FirewallRules(RootModel[List[FirewallRule]]):
    root: List[FirewallRule]


class GetFirewallConfigRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class GetFirewallConfigResponse(BaseModel):
    FirewallConfig_1: Optional[FirewallConfig] = Field(None, alias='FirewallConfig')


class GetFirewallDomainListRequest(BaseModel):
    FirewallDomainListId: ResourceId


class GetFirewallDomainListResponse(BaseModel):
    FirewallDomainList_1: Optional[FirewallDomainList] = Field(
        None, alias='FirewallDomainList'
    )


class GetFirewallRuleGroupAssociationRequest(BaseModel):
    FirewallRuleGroupAssociationId: ResourceId


class GetFirewallRuleGroupAssociationResponse(BaseModel):
    FirewallRuleGroupAssociation_1: Optional[FirewallRuleGroupAssociation] = Field(
        None, alias='FirewallRuleGroupAssociation'
    )


class GetFirewallRuleGroupRequest(BaseModel):
    FirewallRuleGroupId: ResourceId


class GetFirewallRuleGroupResponse(BaseModel):
    FirewallRuleGroup_1: Optional[FirewallRuleGroup] = Field(
        None, alias='FirewallRuleGroup'
    )


class GetResolverConfigRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class GetResolverDnssecConfigRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class GetResolverEndpointRequest(BaseModel):
    ResolverEndpointId: ResourceId


class GetResolverQueryLogConfigAssociationRequest(BaseModel):
    ResolverQueryLogConfigAssociationId: ResourceId


class GetResolverQueryLogConfigPolicyResponse(BaseModel):
    ResolverQueryLogConfigPolicy_1: Optional[ResolverQueryLogConfigPolicy] = Field(
        None, alias='ResolverQueryLogConfigPolicy'
    )


class GetResolverQueryLogConfigRequest(BaseModel):
    ResolverQueryLogConfigId: ResourceId


class GetResolverRuleAssociationRequest(BaseModel):
    ResolverRuleAssociationId: ResourceId


class GetResolverRulePolicyResponse(BaseModel):
    ResolverRulePolicy_1: Optional[ResolverRulePolicy] = Field(
        None, alias='ResolverRulePolicy'
    )


class GetResolverRuleRequest(BaseModel):
    ResolverRuleId: ResourceId


class ImportFirewallDomainsRequest(BaseModel):
    DomainFileUrl: DomainListFileUrl
    FirewallDomainListId: ResourceId
    Operation: FirewallDomainImportOperation


class ImportFirewallDomainsResponse(BaseModel):
    Id: Optional[ResourceId] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Status: Optional[FirewallDomainListStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class IpAddressRequest(BaseModel):
    Ip_1: Optional[Ip] = Field(None, alias='Ip')
    Ipv6_1: Optional[Ipv6] = Field(None, alias='Ipv6')
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class IpAddressResponse(BaseModel):
    CreationTime: Optional[Rfc3339TimeString] = None
    Ip_1: Optional[Ip] = Field(None, alias='Ip')
    IpId: Optional[ResourceId] = None
    Ipv6_1: Optional[Ipv6] = Field(None, alias='Ipv6')
    ModificationTime: Optional[Rfc3339TimeString] = None
    Status: Optional[IpAddressStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class IpAddressUpdate(BaseModel):
    Ip_1: Optional[Ip] = Field(None, alias='Ip')
    IpId: Optional[ResourceId] = None
    Ipv6_1: Optional[Ipv6] = Field(None, alias='Ipv6')
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class IpAddressesRequest(RootModel[List[IpAddressRequest]]):
    root: List[IpAddressRequest] = Field(..., max_length=20, min_length=1)


class IpAddressesResponse(RootModel[List[IpAddressResponse]]):
    root: List[IpAddressResponse]


class ListFirewallConfigsRequest(BaseModel):
    MaxResults: Optional[ListFirewallConfigsMaxResult] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallConfigsResponse(BaseModel):
    FirewallConfigs: Optional[FirewallConfigList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallDomainListsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallDomainListsResponse(BaseModel):
    FirewallDomainLists: Optional[FirewallDomainListMetadataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallDomainsRequest(BaseModel):
    FirewallDomainListId: ResourceId
    MaxResults: Optional[ListDomainMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallDomainsResponse(BaseModel):
    Domains: Optional[FirewallDomains] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallRuleGroupAssociationsRequest(BaseModel):
    FirewallRuleGroupId: Optional[ResourceId] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')
    Status: Optional[FirewallRuleGroupAssociationStatus] = None
    VpcId: Optional[ResourceId] = None


class ListFirewallRuleGroupAssociationsResponse(BaseModel):
    FirewallRuleGroupAssociations_1: Optional[FirewallRuleGroupAssociations] = Field(
        None, alias='FirewallRuleGroupAssociations'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallRuleGroupsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallRuleGroupsResponse(BaseModel):
    FirewallRuleGroups: Optional[FirewallRuleGroupMetadataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFirewallRulesRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    FirewallRuleGroupId: ResourceId
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Priority_1: Optional[Priority] = Field(None, alias='Priority')


class ListFirewallRulesResponse(BaseModel):
    FirewallRules_1: Optional[FirewallRules] = Field(None, alias='FirewallRules')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverConfigsRequest(BaseModel):
    MaxResults: Optional[ListResolverConfigsMaxResult] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverDnssecConfigsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverEndpointIpAddressesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverEndpointId: ResourceId


class ListResolverEndpointIpAddressesResponse(BaseModel):
    IpAddresses: Optional[IpAddressesResponse] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverEndpointsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverQueryLogConfigAssociationsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortByKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListResolverQueryLogConfigsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy: Optional[SortByKey] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListResolverRuleAssociationsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListResolverRulesRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceArn: Arn


class PutResolverQueryLogConfigPolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    ResolverQueryLogConfigPolicy_1: ResolverQueryLogConfigPolicy = Field(
        ..., alias='ResolverQueryLogConfigPolicy'
    )


class PutResolverRulePolicyRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    ResolverRulePolicy_1: ResolverRulePolicy = Field(..., alias='ResolverRulePolicy')


class ResolverConfig(BaseModel):
    AutodefinedReverse: Optional[ResolverAutodefinedReverseStatus] = None
    Id: Optional[ResourceId] = None
    OwnerId: Optional[AccountId] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')


class ResolverConfigList(RootModel[List[ResolverConfig]]):
    root: List[ResolverConfig]


class ResolverDnssecConfig(BaseModel):
    Id: Optional[ResourceId] = None
    OwnerId: Optional[AccountId] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    ValidationStatus: Optional[ResolverDNSSECValidationStatus] = None


class ResolverDnssecConfigList(RootModel[List[ResolverDnssecConfig]]):
    root: List[ResolverDnssecConfig]


class ResolverEndpoint(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    Direction: Optional[ResolverEndpointDirection] = None
    HostVPCId: Optional[ResourceId] = None
    Id: Optional[ResourceId] = None
    IpAddressCount_1: Optional[IpAddressCount] = Field(None, alias='IpAddressCount')
    ModificationTime: Optional[Rfc3339TimeString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverEndpointType_1: Optional[ResolverEndpointType] = Field(
        None, alias='ResolverEndpointType'
    )
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    Status: Optional[ResolverEndpointStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class ResolverEndpoints(RootModel[List[ResolverEndpoint]]):
    root: List[ResolverEndpoint]


class ResolverQueryLogConfig(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AssociationCount: Optional[Count] = None
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    DestinationArn_1: Optional[DestinationArn] = Field(None, alias='DestinationArn')
    Id: Optional[ResourceId] = None
    Name: Optional[ResolverQueryLogConfigName] = None
    OwnerId: Optional[AccountId] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')
    Status: Optional[ResolverQueryLogConfigStatus] = None


class ResolverQueryLogConfigAssociation(BaseModel):
    CreationTime: Optional[Rfc3339TimeString] = None
    Error: Optional[ResolverQueryLogConfigAssociationError] = None
    ErrorMessage: Optional[ResolverQueryLogConfigAssociationErrorMessage] = None
    Id: Optional[ResourceId] = None
    ResolverQueryLogConfigId: Optional[ResourceId] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    Status: Optional[ResolverQueryLogConfigAssociationStatus] = None


class ResolverQueryLogConfigAssociationList(
    RootModel[List[ResolverQueryLogConfigAssociation]]
):
    root: List[ResolverQueryLogConfigAssociation]


class ResolverQueryLogConfigList(RootModel[List[ResolverQueryLogConfig]]):
    root: List[ResolverQueryLogConfig]


class ResolverRule(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationTime: Optional[Rfc3339TimeString] = None
    CreatorRequestId_1: Optional[CreatorRequestId] = Field(
        None, alias='CreatorRequestId'
    )
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    Id: Optional[ResourceId] = None
    ModificationTime: Optional[Rfc3339TimeString] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    OwnerId: Optional[AccountId] = None
    ResolverEndpointId: Optional[ResourceId] = None
    RuleType: Optional[RuleTypeOption] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')
    Status: Optional[ResolverRuleStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    TargetIps: Optional[TargetList] = None


class ResolverRuleAssociation(BaseModel):
    Id: Optional[ResourceId] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverRuleId: Optional[ResourceId] = None
    Status: Optional[ResolverRuleAssociationStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VPCId: Optional[ResourceId] = None


class ResolverRuleAssociations(RootModel[List[ResolverRuleAssociation]]):
    root: List[ResolverRuleAssociation]


class ResolverRuleConfig(BaseModel):
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverEndpointId: Optional[ResourceId] = None
    TargetIps: Optional[TargetList] = None


class ResolverRules(RootModel[List[ResolverRule]]):
    root: List[ResolverRule]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200)


class TagResourceRequest(BaseModel):
    ResourceArn: Arn
    Tags: TagList


class UpdateFirewallConfigResponse(BaseModel):
    FirewallConfig_1: Optional[FirewallConfig] = Field(None, alias='FirewallConfig')


class UpdateFirewallRuleGroupAssociationResponse(BaseModel):
    FirewallRuleGroupAssociation_1: Optional[FirewallRuleGroupAssociation] = Field(
        None, alias='FirewallRuleGroupAssociation'
    )


class UpdateFirewallRuleResponse(BaseModel):
    FirewallRule_1: Optional[FirewallRule] = Field(None, alias='FirewallRule')


class UpdateResolverConfigResponse(BaseModel):
    ResolverConfig_1: Optional[ResolverConfig] = Field(None, alias='ResolverConfig')


class UpdateResolverDnssecConfigRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    Validation_1: Validation = Field(..., alias='Validation')


class UpdateResolverDnssecConfigResponse(BaseModel):
    ResolverDNSSECConfig: Optional[ResolverDnssecConfig] = None


class UpdateResolverEndpointResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class UpdateResolverRuleRequest(BaseModel):
    Config: ResolverRuleConfig
    ResolverRuleId: ResourceId


class UpdateResolverRuleResponse(BaseModel):
    ResolverRule_1: Optional[ResolverRule] = Field(None, alias='ResolverRule')


class AssociateFirewallRuleGroupRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    FirewallRuleGroupId: ResourceId
    MutationProtection: Optional[MutationProtectionStatus] = None
    Name_1: Name = Field(..., alias='Name')
    Priority_1: Priority = Field(..., alias='Priority')
    Tags: Optional[TagList] = None
    VpcId: ResourceId


class AssociateFirewallRuleGroupResponse(BaseModel):
    FirewallRuleGroupAssociation_1: Optional[FirewallRuleGroupAssociation] = Field(
        None, alias='FirewallRuleGroupAssociation'
    )


class AssociateResolverEndpointIpAddressRequest(BaseModel):
    IpAddress: IpAddressUpdate
    ResolverEndpointId: ResourceId


class AssociateResolverEndpointIpAddressResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class AssociateResolverQueryLogConfigResponse(BaseModel):
    ResolverQueryLogConfigAssociation_1: Optional[ResolverQueryLogConfigAssociation] = (
        Field(None, alias='ResolverQueryLogConfigAssociation')
    )


class AssociateResolverRuleResponse(BaseModel):
    ResolverRuleAssociation_1: Optional[ResolverRuleAssociation] = Field(
        None, alias='ResolverRuleAssociation'
    )


class CreateFirewallDomainListRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagList] = None


class CreateFirewallDomainListResponse(BaseModel):
    FirewallDomainList_1: Optional[FirewallDomainList] = Field(
        None, alias='FirewallDomainList'
    )


class CreateFirewallRuleGroupRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagList] = None


class CreateFirewallRuleGroupResponse(BaseModel):
    FirewallRuleGroup_1: Optional[FirewallRuleGroup] = Field(
        None, alias='FirewallRuleGroup'
    )


class CreateFirewallRuleResponse(BaseModel):
    FirewallRule_1: Optional[FirewallRule] = Field(None, alias='FirewallRule')


class CreateResolverEndpointRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    Direction: ResolverEndpointDirection
    IpAddresses: IpAddressesRequest
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverEndpointType_1: Optional[ResolverEndpointType] = Field(
        None, alias='ResolverEndpointType'
    )
    SecurityGroupIds_1: SecurityGroupIds = Field(..., alias='SecurityGroupIds')
    Tags: Optional[TagList] = None


class CreateResolverEndpointResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class CreateResolverQueryLogConfigRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    DestinationArn_1: DestinationArn = Field(..., alias='DestinationArn')
    Name: ResolverQueryLogConfigName
    Tags: Optional[TagList] = None


class CreateResolverQueryLogConfigResponse(BaseModel):
    ResolverQueryLogConfig_1: Optional[ResolverQueryLogConfig] = Field(
        None, alias='ResolverQueryLogConfig'
    )


class CreateResolverRuleRequest(BaseModel):
    CreatorRequestId_1: CreatorRequestId = Field(..., alias='CreatorRequestId')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Name_1: Optional[Name] = Field(None, alias='Name')
    ResolverEndpointId: Optional[ResourceId] = None
    RuleType: RuleTypeOption
    Tags: Optional[TagList] = None
    TargetIps: Optional[TargetList] = None


class CreateResolverRuleResponse(BaseModel):
    ResolverRule_1: Optional[ResolverRule] = Field(None, alias='ResolverRule')


class DeleteFirewallDomainListResponse(BaseModel):
    FirewallDomainList_1: Optional[FirewallDomainList] = Field(
        None, alias='FirewallDomainList'
    )


class DeleteFirewallRuleGroupResponse(BaseModel):
    FirewallRuleGroup_1: Optional[FirewallRuleGroup] = Field(
        None, alias='FirewallRuleGroup'
    )


class DeleteFirewallRuleResponse(BaseModel):
    FirewallRule_1: Optional[FirewallRule] = Field(None, alias='FirewallRule')


class DeleteResolverEndpointResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class DeleteResolverQueryLogConfigResponse(BaseModel):
    ResolverQueryLogConfig_1: Optional[ResolverQueryLogConfig] = Field(
        None, alias='ResolverQueryLogConfig'
    )


class DeleteResolverRuleResponse(BaseModel):
    ResolverRule_1: Optional[ResolverRule] = Field(None, alias='ResolverRule')


class DisassociateFirewallRuleGroupResponse(BaseModel):
    FirewallRuleGroupAssociation_1: Optional[FirewallRuleGroupAssociation] = Field(
        None, alias='FirewallRuleGroupAssociation'
    )


class DisassociateResolverEndpointIpAddressRequest(BaseModel):
    IpAddress: IpAddressUpdate
    ResolverEndpointId: ResourceId


class DisassociateResolverEndpointIpAddressResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class DisassociateResolverQueryLogConfigResponse(BaseModel):
    ResolverQueryLogConfigAssociation_1: Optional[ResolverQueryLogConfigAssociation] = (
        Field(None, alias='ResolverQueryLogConfigAssociation')
    )


class DisassociateResolverRuleResponse(BaseModel):
    ResolverRuleAssociation_1: Optional[ResolverRuleAssociation] = Field(
        None, alias='ResolverRuleAssociation'
    )


class GetResolverConfigResponse(BaseModel):
    ResolverConfig_1: Optional[ResolverConfig] = Field(None, alias='ResolverConfig')


class GetResolverDnssecConfigResponse(BaseModel):
    ResolverDNSSECConfig: Optional[ResolverDnssecConfig] = None


class GetResolverEndpointResponse(BaseModel):
    ResolverEndpoint_1: Optional[ResolverEndpoint] = Field(
        None, alias='ResolverEndpoint'
    )


class GetResolverQueryLogConfigAssociationResponse(BaseModel):
    ResolverQueryLogConfigAssociation_1: Optional[ResolverQueryLogConfigAssociation] = (
        Field(None, alias='ResolverQueryLogConfigAssociation')
    )


class GetResolverQueryLogConfigResponse(BaseModel):
    ResolverQueryLogConfig_1: Optional[ResolverQueryLogConfig] = Field(
        None, alias='ResolverQueryLogConfig'
    )


class GetResolverRuleAssociationResponse(BaseModel):
    ResolverRuleAssociation_1: Optional[ResolverRuleAssociation] = Field(
        None, alias='ResolverRuleAssociation'
    )


class GetResolverRuleResponse(BaseModel):
    ResolverRule_1: Optional[ResolverRule] = Field(None, alias='ResolverRule')


class ListResolverConfigsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverConfigs: Optional[ResolverConfigList] = None


class ListResolverDnssecConfigsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverDnssecConfigs: Optional[ResolverDnssecConfigList] = None


class ListResolverEndpointsResponse(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverEndpoints_1: Optional[ResolverEndpoints] = Field(
        None, alias='ResolverEndpoints'
    )


class ListResolverQueryLogConfigAssociationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverQueryLogConfigAssociations: Optional[
        ResolverQueryLogConfigAssociationList
    ] = None
    TotalCount: Optional[Count] = None
    TotalFilteredCount: Optional[Count] = None


class ListResolverQueryLogConfigsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverQueryLogConfigs: Optional[ResolverQueryLogConfigList] = None
    TotalCount: Optional[Count] = None
    TotalFilteredCount: Optional[Count] = None


class ListResolverRuleAssociationsResponse(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverRuleAssociations_1: Optional[ResolverRuleAssociations] = Field(
        None, alias='ResolverRuleAssociations'
    )


class ListResolverRulesResponse(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResolverRules_1: Optional[ResolverRules] = Field(None, alias='ResolverRules')


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[TagList] = None
